class <> implements ConnectionInterface {
  private connection: any
  public ready: any

  connectionOptions: any

  constructor(options: any) {
    this.connectionOptions = options
    this.ready = (async () => {
      this.connection = await this.getConnection(this.connectionOptions)
      return this
    })()
  }

  async getConnection(options): Promise<any> {
    // return mysql.createConnection(options)
  }

  closeConnection(): void {
    // this.connection.end()
  }

  async query(query: string, context: any): Promise<any | null> {

    // TODO: Need a consistent way to handle failures
    const results = await new Promise((resolve, reject) => {
      this.connection.query(query, [context], (err: any, results: any) => {
        if (err) 
          reject(err)
              
        else 
          resolve(results)
              
      })
    })

    return results
  }
}

export default MySqlConnection
